security:
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        users_in_memory: { memory: null }
        users_admin:
            memory:
                users:
                    admin: { password: test, roles: [ 'ROLE_ADMIN' ] }
                    superadmin: { password: test, roles: [ 'ROLE_SUPER_ADMIN' ] }
    encoders:
        # this internal class is used by Symfony to represent in-memory users
        Symfony\Component\Security\Core\User\User: 'plaintext'
    role_hierarchy:
        ROLE_SUPER_ADMIN: [ROLE_ADMIN]

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        admin:
            pattern: ^/admin
            anonymous: true
            form_login:
                provider: users_admin
                login_path:  /admin/login
                check_path:  /admin/login_check
                default_target_path: /admin/dashboard
                csrf_token_generator: security.csrf.token_manager
        main:
            anonymous: lazy
            provider: users_in_memory

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: /admin/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: /admin/login_check, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/admin/users, roles: ROLE_SUPER_ADMIN }
        - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
